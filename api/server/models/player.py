# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server import util


class Player(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, sofifa_id: int=None, player_url: str=None, long_name: str=None, age: int=None, height_cm: int=None, weight_kg: int=None, nationality: str=None, club: str=None, overall: int=None, potential: int=None, player_positions: str=None, preferred_foot: str=None, work_rate: str=None, pace: int=None, shooting: int=None, passing: int=None, dribbling: int=None, defending: int=None, physic: int=None, gk_diving: int=None, gk_handling: int=None, gk_kicking: int=None, gk_reflexes: int=None, gk_speed: int=None, gk_positioning: int=None, player_traits: int=None, attacking_crossing: int=None, attacking_finishing: int=None, attacking_heading_accuracy: int=None, attacking_short_passing: int=None, attacking_volleys: int=None, skill_dribbling: int=None, skill_curve: int=None, skill_fk_accuracy: int=None, skill_long_passing: int=None, skill_ball_control: int=None, movement_acceleration: int=None, movement_sprint_speed: int=None, movement_agility: int=None, movement_reactions: int=None, movement_balance: int=None, power_shot_power: int=None, power_jumping: int=None, power_stamina: int=None, power_strength: int=None, power_long_shots: int=None, mentality_aggression: int=None, mentality_interceptions: int=None, mentality_positioning: int=None, mentality_vision: int=None, mentality_penalties: int=None, mentality_composure: int=None, defending_marking: int=None, defending_standing_tackle: int=None, defending_sliding_tackle: int=None, goalkeeping_diving: int=None, goalkeeping_handling: int=None, goalkeeping_kicking: int=None, goalkeeping_positioning: int=None, goalkeeping_reflexes: int=None):  # noqa: E501
        """Player - a model defined in Swagger

        :param name: The name of this Player.  # noqa: E501
        :type name: str
        :param sofifa_id: The sofifa_id of this Player.  # noqa: E501
        :type sofifa_id: int
        :param player_url: The player_url of this Player.  # noqa: E501
        :type player_url: str
        :param long_name: The long_name of this Player.  # noqa: E501
        :type long_name: str
        :param age: The age of this Player.  # noqa: E501
        :type age: int
        :param height_cm: The height_cm of this Player.  # noqa: E501
        :type height_cm: int
        :param weight_kg: The weight_kg of this Player.  # noqa: E501
        :type weight_kg: int
        :param nationality: The nationality of this Player.  # noqa: E501
        :type nationality: str
        :param club: The club of this Player.  # noqa: E501
        :type club: str
        :param overall: The overall of this Player.  # noqa: E501
        :type overall: int
        :param potential: The potential of this Player.  # noqa: E501
        :type potential: int
        :param player_positions: The player_positions of this Player.  # noqa: E501
        :type player_positions: str
        :param preferred_foot: The preferred_foot of this Player.  # noqa: E501
        :type preferred_foot: str
        :param work_rate: The work_rate of this Player.  # noqa: E501
        :type work_rate: str
        :param pace: The pace of this Player.  # noqa: E501
        :type pace: int
        :param shooting: The shooting of this Player.  # noqa: E501
        :type shooting: int
        :param passing: The passing of this Player.  # noqa: E501
        :type passing: int
        :param dribbling: The dribbling of this Player.  # noqa: E501
        :type dribbling: int
        :param defending: The defending of this Player.  # noqa: E501
        :type defending: int
        :param physic: The physic of this Player.  # noqa: E501
        :type physic: int
        :param gk_diving: The gk_diving of this Player.  # noqa: E501
        :type gk_diving: int
        :param gk_handling: The gk_handling of this Player.  # noqa: E501
        :type gk_handling: int
        :param gk_kicking: The gk_kicking of this Player.  # noqa: E501
        :type gk_kicking: int
        :param gk_reflexes: The gk_reflexes of this Player.  # noqa: E501
        :type gk_reflexes: int
        :param gk_speed: The gk_speed of this Player.  # noqa: E501
        :type gk_speed: int
        :param gk_positioning: The gk_positioning of this Player.  # noqa: E501
        :type gk_positioning: int
        :param player_traits: The player_traits of this Player.  # noqa: E501
        :type player_traits: int
        :param attacking_crossing: The attacking_crossing of this Player.  # noqa: E501
        :type attacking_crossing: int
        :param attacking_finishing: The attacking_finishing of this Player.  # noqa: E501
        :type attacking_finishing: int
        :param attacking_heading_accuracy: The attacking_heading_accuracy of this Player.  # noqa: E501
        :type attacking_heading_accuracy: int
        :param attacking_short_passing: The attacking_short_passing of this Player.  # noqa: E501
        :type attacking_short_passing: int
        :param attacking_volleys: The attacking_volleys of this Player.  # noqa: E501
        :type attacking_volleys: int
        :param skill_dribbling: The skill_dribbling of this Player.  # noqa: E501
        :type skill_dribbling: int
        :param skill_curve: The skill_curve of this Player.  # noqa: E501
        :type skill_curve: int
        :param skill_fk_accuracy: The skill_fk_accuracy of this Player.  # noqa: E501
        :type skill_fk_accuracy: int
        :param skill_long_passing: The skill_long_passing of this Player.  # noqa: E501
        :type skill_long_passing: int
        :param skill_ball_control: The skill_ball_control of this Player.  # noqa: E501
        :type skill_ball_control: int
        :param movement_acceleration: The movement_acceleration of this Player.  # noqa: E501
        :type movement_acceleration: int
        :param movement_sprint_speed: The movement_sprint_speed of this Player.  # noqa: E501
        :type movement_sprint_speed: int
        :param movement_agility: The movement_agility of this Player.  # noqa: E501
        :type movement_agility: int
        :param movement_reactions: The movement_reactions of this Player.  # noqa: E501
        :type movement_reactions: int
        :param movement_balance: The movement_balance of this Player.  # noqa: E501
        :type movement_balance: int
        :param power_shot_power: The power_shot_power of this Player.  # noqa: E501
        :type power_shot_power: int
        :param power_jumping: The power_jumping of this Player.  # noqa: E501
        :type power_jumping: int
        :param power_stamina: The power_stamina of this Player.  # noqa: E501
        :type power_stamina: int
        :param power_strength: The power_strength of this Player.  # noqa: E501
        :type power_strength: int
        :param power_long_shots: The power_long_shots of this Player.  # noqa: E501
        :type power_long_shots: int
        :param mentality_aggression: The mentality_aggression of this Player.  # noqa: E501
        :type mentality_aggression: int
        :param mentality_interceptions: The mentality_interceptions of this Player.  # noqa: E501
        :type mentality_interceptions: int
        :param mentality_positioning: The mentality_positioning of this Player.  # noqa: E501
        :type mentality_positioning: int
        :param mentality_vision: The mentality_vision of this Player.  # noqa: E501
        :type mentality_vision: int
        :param mentality_penalties: The mentality_penalties of this Player.  # noqa: E501
        :type mentality_penalties: int
        :param mentality_composure: The mentality_composure of this Player.  # noqa: E501
        :type mentality_composure: int
        :param defending_marking: The defending_marking of this Player.  # noqa: E501
        :type defending_marking: int
        :param defending_standing_tackle: The defending_standing_tackle of this Player.  # noqa: E501
        :type defending_standing_tackle: int
        :param defending_sliding_tackle: The defending_sliding_tackle of this Player.  # noqa: E501
        :type defending_sliding_tackle: int
        :param goalkeeping_diving: The goalkeeping_diving of this Player.  # noqa: E501
        :type goalkeeping_diving: int
        :param goalkeeping_handling: The goalkeeping_handling of this Player.  # noqa: E501
        :type goalkeeping_handling: int
        :param goalkeeping_kicking: The goalkeeping_kicking of this Player.  # noqa: E501
        :type goalkeeping_kicking: int
        :param goalkeeping_positioning: The goalkeeping_positioning of this Player.  # noqa: E501
        :type goalkeeping_positioning: int
        :param goalkeeping_reflexes: The goalkeeping_reflexes of this Player.  # noqa: E501
        :type goalkeeping_reflexes: int
        """
        self.swagger_types = {
            'name': str,
            'sofifa_id': int,
            'player_url': str,
            'long_name': str,
            'age': int,
            'height_cm': int,
            'weight_kg': int,
            'nationality': str,
            'club': str,
            'overall': int,
            'potential': int,
            'player_positions': str,
            'preferred_foot': str,
            'work_rate': str,
            'pace': int,
            'shooting': int,
            'passing': int,
            'dribbling': int,
            'defending': int,
            'physic': int,
            'gk_diving': int,
            'gk_handling': int,
            'gk_kicking': int,
            'gk_reflexes': int,
            'gk_speed': int,
            'gk_positioning': int,
            'player_traits': int,
            'attacking_crossing': int,
            'attacking_finishing': int,
            'attacking_heading_accuracy': int,
            'attacking_short_passing': int,
            'attacking_volleys': int,
            'skill_dribbling': int,
            'skill_curve': int,
            'skill_fk_accuracy': int,
            'skill_long_passing': int,
            'skill_ball_control': int,
            'movement_acceleration': int,
            'movement_sprint_speed': int,
            'movement_agility': int,
            'movement_reactions': int,
            'movement_balance': int,
            'power_shot_power': int,
            'power_jumping': int,
            'power_stamina': int,
            'power_strength': int,
            'power_long_shots': int,
            'mentality_aggression': int,
            'mentality_interceptions': int,
            'mentality_positioning': int,
            'mentality_vision': int,
            'mentality_penalties': int,
            'mentality_composure': int,
            'defending_marking': int,
            'defending_standing_tackle': int,
            'defending_sliding_tackle': int,
            'goalkeeping_diving': int,
            'goalkeeping_handling': int,
            'goalkeeping_kicking': int,
            'goalkeeping_positioning': int,
            'goalkeeping_reflexes': int
        }

        self.attribute_map = {
            'name': 'name',
            'sofifa_id': 'sofifa_id',
            'player_url': 'player_url',
            'long_name': 'long_name',
            'age': 'age',
            'height_cm': 'height_cm',
            'weight_kg': 'weight_kg',
            'nationality': 'nationality',
            'club': 'club',
            'overall': 'overall',
            'potential': 'potential',
            'player_positions': 'player_positions',
            'preferred_foot': 'preferred_foot',
            'work_rate': 'work_rate',
            'pace': 'pace',
            'shooting': 'shooting',
            'passing': 'passing',
            'dribbling': 'dribbling',
            'defending': 'defending',
            'physic': 'physic',
            'gk_diving': 'gk_diving',
            'gk_handling': 'gk_handling',
            'gk_kicking': 'gk_kicking',
            'gk_reflexes': 'gk_reflexes',
            'gk_speed': 'gk_speed',
            'gk_positioning': 'gk_positioning',
            'player_traits': 'player_traits',
            'attacking_crossing': 'attacking_crossing',
            'attacking_finishing': 'attacking_finishing',
            'attacking_heading_accuracy': 'attacking_heading_accuracy',
            'attacking_short_passing': 'attacking_short_passing',
            'attacking_volleys': 'attacking_volleys',
            'skill_dribbling': 'skill_dribbling',
            'skill_curve': 'skill_curve',
            'skill_fk_accuracy': 'skill_fk_accuracy',
            'skill_long_passing': 'skill_long_passing',
            'skill_ball_control': 'skill_ball_control',
            'movement_acceleration': 'movement_acceleration',
            'movement_sprint_speed': 'movement_sprint_speed',
            'movement_agility': 'movement_agility',
            'movement_reactions': 'movement_reactions',
            'movement_balance': 'movement_balance',
            'power_shot_power': 'power_shot_power',
            'power_jumping': 'power_jumping',
            'power_stamina': 'power_stamina',
            'power_strength': 'power_strength',
            'power_long_shots': 'power_long_shots',
            'mentality_aggression': 'mentality_aggression',
            'mentality_interceptions': 'mentality_interceptions',
            'mentality_positioning': 'mentality_positioning',
            'mentality_vision': 'mentality_vision',
            'mentality_penalties': 'mentality_penalties',
            'mentality_composure': 'mentality_composure',
            'defending_marking': 'defending_marking',
            'defending_standing_tackle': 'defending_standing_tackle',
            'defending_sliding_tackle': 'defending_sliding_tackle',
            'goalkeeping_diving': 'goalkeeping_diving',
            'goalkeeping_handling': 'goalkeeping_handling',
            'goalkeeping_kicking': 'goalkeeping_kicking',
            'goalkeeping_positioning': 'goalkeeping_positioning',
            'goalkeeping_reflexes': 'goalkeeping_reflexes'
        }

        self._name = name
        self._sofifa_id = sofifa_id
        self._player_url = player_url
        self._long_name = long_name
        self._age = age
        self._height_cm = height_cm
        self._weight_kg = weight_kg
        self._nationality = nationality
        self._club = club
        self._overall = overall
        self._potential = potential
        self._player_positions = player_positions
        self._preferred_foot = preferred_foot
        self._work_rate = work_rate
        self._pace = pace
        self._shooting = shooting
        self._passing = passing
        self._dribbling = dribbling
        self._defending = defending
        self._physic = physic
        self._gk_diving = gk_diving
        self._gk_handling = gk_handling
        self._gk_kicking = gk_kicking
        self._gk_reflexes = gk_reflexes
        self._gk_speed = gk_speed
        self._gk_positioning = gk_positioning
        self._player_traits = player_traits
        self._attacking_crossing = attacking_crossing
        self._attacking_finishing = attacking_finishing
        self._attacking_heading_accuracy = attacking_heading_accuracy
        self._attacking_short_passing = attacking_short_passing
        self._attacking_volleys = attacking_volleys
        self._skill_dribbling = skill_dribbling
        self._skill_curve = skill_curve
        self._skill_fk_accuracy = skill_fk_accuracy
        self._skill_long_passing = skill_long_passing
        self._skill_ball_control = skill_ball_control
        self._movement_acceleration = movement_acceleration
        self._movement_sprint_speed = movement_sprint_speed
        self._movement_agility = movement_agility
        self._movement_reactions = movement_reactions
        self._movement_balance = movement_balance
        self._power_shot_power = power_shot_power
        self._power_jumping = power_jumping
        self._power_stamina = power_stamina
        self._power_strength = power_strength
        self._power_long_shots = power_long_shots
        self._mentality_aggression = mentality_aggression
        self._mentality_interceptions = mentality_interceptions
        self._mentality_positioning = mentality_positioning
        self._mentality_vision = mentality_vision
        self._mentality_penalties = mentality_penalties
        self._mentality_composure = mentality_composure
        self._defending_marking = defending_marking
        self._defending_standing_tackle = defending_standing_tackle
        self._defending_sliding_tackle = defending_sliding_tackle
        self._goalkeeping_diving = goalkeeping_diving
        self._goalkeeping_handling = goalkeeping_handling
        self._goalkeeping_kicking = goalkeeping_kicking
        self._goalkeeping_positioning = goalkeeping_positioning
        self._goalkeeping_reflexes = goalkeeping_reflexes

    @classmethod
    def from_dict(cls, dikt) -> 'Player':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Player of this Player.  # noqa: E501
        :rtype: Player
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Player.


        :return: The name of this Player.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Player.


        :param name: The name of this Player.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def sofifa_id(self) -> int:
        """Gets the sofifa_id of this Player.


        :return: The sofifa_id of this Player.
        :rtype: int
        """
        return self._sofifa_id

    @sofifa_id.setter
    def sofifa_id(self, sofifa_id: int):
        """Sets the sofifa_id of this Player.


        :param sofifa_id: The sofifa_id of this Player.
        :type sofifa_id: int
        """
        if sofifa_id is None:
            raise ValueError("Invalid value for `sofifa_id`, must not be `None`")  # noqa: E501

        self._sofifa_id = sofifa_id

    @property
    def player_url(self) -> str:
        """Gets the player_url of this Player.


        :return: The player_url of this Player.
        :rtype: str
        """
        return self._player_url

    @player_url.setter
    def player_url(self, player_url: str):
        """Sets the player_url of this Player.


        :param player_url: The player_url of this Player.
        :type player_url: str
        """

        self._player_url = player_url

    @property
    def long_name(self) -> str:
        """Gets the long_name of this Player.


        :return: The long_name of this Player.
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name: str):
        """Sets the long_name of this Player.


        :param long_name: The long_name of this Player.
        :type long_name: str
        """

        self._long_name = long_name

    @property
    def age(self) -> int:
        """Gets the age of this Player.


        :return: The age of this Player.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age: int):
        """Sets the age of this Player.


        :param age: The age of this Player.
        :type age: int
        """

        self._age = age

    @property
    def height_cm(self) -> int:
        """Gets the height_cm of this Player.


        :return: The height_cm of this Player.
        :rtype: int
        """
        return self._height_cm

    @height_cm.setter
    def height_cm(self, height_cm: int):
        """Sets the height_cm of this Player.


        :param height_cm: The height_cm of this Player.
        :type height_cm: int
        """

        self._height_cm = height_cm

    @property
    def weight_kg(self) -> int:
        """Gets the weight_kg of this Player.


        :return: The weight_kg of this Player.
        :rtype: int
        """
        return self._weight_kg

    @weight_kg.setter
    def weight_kg(self, weight_kg: int):
        """Sets the weight_kg of this Player.


        :param weight_kg: The weight_kg of this Player.
        :type weight_kg: int
        """

        self._weight_kg = weight_kg

    @property
    def nationality(self) -> str:
        """Gets the nationality of this Player.


        :return: The nationality of this Player.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality: str):
        """Sets the nationality of this Player.


        :param nationality: The nationality of this Player.
        :type nationality: str
        """

        self._nationality = nationality

    @property
    def club(self) -> str:
        """Gets the club of this Player.


        :return: The club of this Player.
        :rtype: str
        """
        return self._club

    @club.setter
    def club(self, club: str):
        """Sets the club of this Player.


        :param club: The club of this Player.
        :type club: str
        """

        self._club = club

    @property
    def overall(self) -> int:
        """Gets the overall of this Player.


        :return: The overall of this Player.
        :rtype: int
        """
        return self._overall

    @overall.setter
    def overall(self, overall: int):
        """Sets the overall of this Player.


        :param overall: The overall of this Player.
        :type overall: int
        """

        self._overall = overall

    @property
    def potential(self) -> int:
        """Gets the potential of this Player.


        :return: The potential of this Player.
        :rtype: int
        """
        return self._potential

    @potential.setter
    def potential(self, potential: int):
        """Sets the potential of this Player.


        :param potential: The potential of this Player.
        :type potential: int
        """

        self._potential = potential

    @property
    def player_positions(self) -> str:
        """Gets the player_positions of this Player.


        :return: The player_positions of this Player.
        :rtype: str
        """
        return self._player_positions

    @player_positions.setter
    def player_positions(self, player_positions: str):
        """Sets the player_positions of this Player.


        :param player_positions: The player_positions of this Player.
        :type player_positions: str
        """

        self._player_positions = player_positions

    @property
    def preferred_foot(self) -> str:
        """Gets the preferred_foot of this Player.


        :return: The preferred_foot of this Player.
        :rtype: str
        """
        return self._preferred_foot

    @preferred_foot.setter
    def preferred_foot(self, preferred_foot: str):
        """Sets the preferred_foot of this Player.


        :param preferred_foot: The preferred_foot of this Player.
        :type preferred_foot: str
        """

        self._preferred_foot = preferred_foot

    @property
    def work_rate(self) -> str:
        """Gets the work_rate of this Player.


        :return: The work_rate of this Player.
        :rtype: str
        """
        return self._work_rate

    @work_rate.setter
    def work_rate(self, work_rate: str):
        """Sets the work_rate of this Player.


        :param work_rate: The work_rate of this Player.
        :type work_rate: str
        """

        self._work_rate = work_rate

    @property
    def pace(self) -> int:
        """Gets the pace of this Player.


        :return: The pace of this Player.
        :rtype: int
        """
        return self._pace

    @pace.setter
    def pace(self, pace: int):
        """Sets the pace of this Player.


        :param pace: The pace of this Player.
        :type pace: int
        """

        self._pace = pace

    @property
    def shooting(self) -> int:
        """Gets the shooting of this Player.


        :return: The shooting of this Player.
        :rtype: int
        """
        return self._shooting

    @shooting.setter
    def shooting(self, shooting: int):
        """Sets the shooting of this Player.


        :param shooting: The shooting of this Player.
        :type shooting: int
        """

        self._shooting = shooting

    @property
    def passing(self) -> int:
        """Gets the passing of this Player.


        :return: The passing of this Player.
        :rtype: int
        """
        return self._passing

    @passing.setter
    def passing(self, passing: int):
        """Sets the passing of this Player.


        :param passing: The passing of this Player.
        :type passing: int
        """

        self._passing = passing

    @property
    def dribbling(self) -> int:
        """Gets the dribbling of this Player.


        :return: The dribbling of this Player.
        :rtype: int
        """
        return self._dribbling

    @dribbling.setter
    def dribbling(self, dribbling: int):
        """Sets the dribbling of this Player.


        :param dribbling: The dribbling of this Player.
        :type dribbling: int
        """

        self._dribbling = dribbling

    @property
    def defending(self) -> int:
        """Gets the defending of this Player.


        :return: The defending of this Player.
        :rtype: int
        """
        return self._defending

    @defending.setter
    def defending(self, defending: int):
        """Sets the defending of this Player.


        :param defending: The defending of this Player.
        :type defending: int
        """

        self._defending = defending

    @property
    def physic(self) -> int:
        """Gets the physic of this Player.


        :return: The physic of this Player.
        :rtype: int
        """
        return self._physic

    @physic.setter
    def physic(self, physic: int):
        """Sets the physic of this Player.


        :param physic: The physic of this Player.
        :type physic: int
        """

        self._physic = physic

    @property
    def gk_diving(self) -> int:
        """Gets the gk_diving of this Player.


        :return: The gk_diving of this Player.
        :rtype: int
        """
        return self._gk_diving

    @gk_diving.setter
    def gk_diving(self, gk_diving: int):
        """Sets the gk_diving of this Player.


        :param gk_diving: The gk_diving of this Player.
        :type gk_diving: int
        """

        self._gk_diving = gk_diving

    @property
    def gk_handling(self) -> int:
        """Gets the gk_handling of this Player.


        :return: The gk_handling of this Player.
        :rtype: int
        """
        return self._gk_handling

    @gk_handling.setter
    def gk_handling(self, gk_handling: int):
        """Sets the gk_handling of this Player.


        :param gk_handling: The gk_handling of this Player.
        :type gk_handling: int
        """

        self._gk_handling = gk_handling

    @property
    def gk_kicking(self) -> int:
        """Gets the gk_kicking of this Player.


        :return: The gk_kicking of this Player.
        :rtype: int
        """
        return self._gk_kicking

    @gk_kicking.setter
    def gk_kicking(self, gk_kicking: int):
        """Sets the gk_kicking of this Player.


        :param gk_kicking: The gk_kicking of this Player.
        :type gk_kicking: int
        """

        self._gk_kicking = gk_kicking

    @property
    def gk_reflexes(self) -> int:
        """Gets the gk_reflexes of this Player.


        :return: The gk_reflexes of this Player.
        :rtype: int
        """
        return self._gk_reflexes

    @gk_reflexes.setter
    def gk_reflexes(self, gk_reflexes: int):
        """Sets the gk_reflexes of this Player.


        :param gk_reflexes: The gk_reflexes of this Player.
        :type gk_reflexes: int
        """

        self._gk_reflexes = gk_reflexes

    @property
    def gk_speed(self) -> int:
        """Gets the gk_speed of this Player.


        :return: The gk_speed of this Player.
        :rtype: int
        """
        return self._gk_speed

    @gk_speed.setter
    def gk_speed(self, gk_speed: int):
        """Sets the gk_speed of this Player.


        :param gk_speed: The gk_speed of this Player.
        :type gk_speed: int
        """

        self._gk_speed = gk_speed

    @property
    def gk_positioning(self) -> int:
        """Gets the gk_positioning of this Player.


        :return: The gk_positioning of this Player.
        :rtype: int
        """
        return self._gk_positioning

    @gk_positioning.setter
    def gk_positioning(self, gk_positioning: int):
        """Sets the gk_positioning of this Player.


        :param gk_positioning: The gk_positioning of this Player.
        :type gk_positioning: int
        """

        self._gk_positioning = gk_positioning

    @property
    def player_traits(self) -> int:
        """Gets the player_traits of this Player.


        :return: The player_traits of this Player.
        :rtype: int
        """
        return self._player_traits

    @player_traits.setter
    def player_traits(self, player_traits: int):
        """Sets the player_traits of this Player.


        :param player_traits: The player_traits of this Player.
        :type player_traits: int
        """

        self._player_traits = player_traits

    @property
    def attacking_crossing(self) -> int:
        """Gets the attacking_crossing of this Player.


        :return: The attacking_crossing of this Player.
        :rtype: int
        """
        return self._attacking_crossing

    @attacking_crossing.setter
    def attacking_crossing(self, attacking_crossing: int):
        """Sets the attacking_crossing of this Player.


        :param attacking_crossing: The attacking_crossing of this Player.
        :type attacking_crossing: int
        """

        self._attacking_crossing = attacking_crossing

    @property
    def attacking_finishing(self) -> int:
        """Gets the attacking_finishing of this Player.


        :return: The attacking_finishing of this Player.
        :rtype: int
        """
        return self._attacking_finishing

    @attacking_finishing.setter
    def attacking_finishing(self, attacking_finishing: int):
        """Sets the attacking_finishing of this Player.


        :param attacking_finishing: The attacking_finishing of this Player.
        :type attacking_finishing: int
        """

        self._attacking_finishing = attacking_finishing

    @property
    def attacking_heading_accuracy(self) -> int:
        """Gets the attacking_heading_accuracy of this Player.


        :return: The attacking_heading_accuracy of this Player.
        :rtype: int
        """
        return self._attacking_heading_accuracy

    @attacking_heading_accuracy.setter
    def attacking_heading_accuracy(self, attacking_heading_accuracy: int):
        """Sets the attacking_heading_accuracy of this Player.


        :param attacking_heading_accuracy: The attacking_heading_accuracy of this Player.
        :type attacking_heading_accuracy: int
        """

        self._attacking_heading_accuracy = attacking_heading_accuracy

    @property
    def attacking_short_passing(self) -> int:
        """Gets the attacking_short_passing of this Player.


        :return: The attacking_short_passing of this Player.
        :rtype: int
        """
        return self._attacking_short_passing

    @attacking_short_passing.setter
    def attacking_short_passing(self, attacking_short_passing: int):
        """Sets the attacking_short_passing of this Player.


        :param attacking_short_passing: The attacking_short_passing of this Player.
        :type attacking_short_passing: int
        """

        self._attacking_short_passing = attacking_short_passing

    @property
    def attacking_volleys(self) -> int:
        """Gets the attacking_volleys of this Player.


        :return: The attacking_volleys of this Player.
        :rtype: int
        """
        return self._attacking_volleys

    @attacking_volleys.setter
    def attacking_volleys(self, attacking_volleys: int):
        """Sets the attacking_volleys of this Player.


        :param attacking_volleys: The attacking_volleys of this Player.
        :type attacking_volleys: int
        """

        self._attacking_volleys = attacking_volleys

    @property
    def skill_dribbling(self) -> int:
        """Gets the skill_dribbling of this Player.


        :return: The skill_dribbling of this Player.
        :rtype: int
        """
        return self._skill_dribbling

    @skill_dribbling.setter
    def skill_dribbling(self, skill_dribbling: int):
        """Sets the skill_dribbling of this Player.


        :param skill_dribbling: The skill_dribbling of this Player.
        :type skill_dribbling: int
        """

        self._skill_dribbling = skill_dribbling

    @property
    def skill_curve(self) -> int:
        """Gets the skill_curve of this Player.


        :return: The skill_curve of this Player.
        :rtype: int
        """
        return self._skill_curve

    @skill_curve.setter
    def skill_curve(self, skill_curve: int):
        """Sets the skill_curve of this Player.


        :param skill_curve: The skill_curve of this Player.
        :type skill_curve: int
        """

        self._skill_curve = skill_curve

    @property
    def skill_fk_accuracy(self) -> int:
        """Gets the skill_fk_accuracy of this Player.


        :return: The skill_fk_accuracy of this Player.
        :rtype: int
        """
        return self._skill_fk_accuracy

    @skill_fk_accuracy.setter
    def skill_fk_accuracy(self, skill_fk_accuracy: int):
        """Sets the skill_fk_accuracy of this Player.


        :param skill_fk_accuracy: The skill_fk_accuracy of this Player.
        :type skill_fk_accuracy: int
        """

        self._skill_fk_accuracy = skill_fk_accuracy

    @property
    def skill_long_passing(self) -> int:
        """Gets the skill_long_passing of this Player.


        :return: The skill_long_passing of this Player.
        :rtype: int
        """
        return self._skill_long_passing

    @skill_long_passing.setter
    def skill_long_passing(self, skill_long_passing: int):
        """Sets the skill_long_passing of this Player.


        :param skill_long_passing: The skill_long_passing of this Player.
        :type skill_long_passing: int
        """

        self._skill_long_passing = skill_long_passing

    @property
    def skill_ball_control(self) -> int:
        """Gets the skill_ball_control of this Player.


        :return: The skill_ball_control of this Player.
        :rtype: int
        """
        return self._skill_ball_control

    @skill_ball_control.setter
    def skill_ball_control(self, skill_ball_control: int):
        """Sets the skill_ball_control of this Player.


        :param skill_ball_control: The skill_ball_control of this Player.
        :type skill_ball_control: int
        """

        self._skill_ball_control = skill_ball_control

    @property
    def movement_acceleration(self) -> int:
        """Gets the movement_acceleration of this Player.


        :return: The movement_acceleration of this Player.
        :rtype: int
        """
        return self._movement_acceleration

    @movement_acceleration.setter
    def movement_acceleration(self, movement_acceleration: int):
        """Sets the movement_acceleration of this Player.


        :param movement_acceleration: The movement_acceleration of this Player.
        :type movement_acceleration: int
        """

        self._movement_acceleration = movement_acceleration

    @property
    def movement_sprint_speed(self) -> int:
        """Gets the movement_sprint_speed of this Player.


        :return: The movement_sprint_speed of this Player.
        :rtype: int
        """
        return self._movement_sprint_speed

    @movement_sprint_speed.setter
    def movement_sprint_speed(self, movement_sprint_speed: int):
        """Sets the movement_sprint_speed of this Player.


        :param movement_sprint_speed: The movement_sprint_speed of this Player.
        :type movement_sprint_speed: int
        """

        self._movement_sprint_speed = movement_sprint_speed

    @property
    def movement_agility(self) -> int:
        """Gets the movement_agility of this Player.


        :return: The movement_agility of this Player.
        :rtype: int
        """
        return self._movement_agility

    @movement_agility.setter
    def movement_agility(self, movement_agility: int):
        """Sets the movement_agility of this Player.


        :param movement_agility: The movement_agility of this Player.
        :type movement_agility: int
        """

        self._movement_agility = movement_agility

    @property
    def movement_reactions(self) -> int:
        """Gets the movement_reactions of this Player.


        :return: The movement_reactions of this Player.
        :rtype: int
        """
        return self._movement_reactions

    @movement_reactions.setter
    def movement_reactions(self, movement_reactions: int):
        """Sets the movement_reactions of this Player.


        :param movement_reactions: The movement_reactions of this Player.
        :type movement_reactions: int
        """

        self._movement_reactions = movement_reactions

    @property
    def movement_balance(self) -> int:
        """Gets the movement_balance of this Player.


        :return: The movement_balance of this Player.
        :rtype: int
        """
        return self._movement_balance

    @movement_balance.setter
    def movement_balance(self, movement_balance: int):
        """Sets the movement_balance of this Player.


        :param movement_balance: The movement_balance of this Player.
        :type movement_balance: int
        """

        self._movement_balance = movement_balance

    @property
    def power_shot_power(self) -> int:
        """Gets the power_shot_power of this Player.


        :return: The power_shot_power of this Player.
        :rtype: int
        """
        return self._power_shot_power

    @power_shot_power.setter
    def power_shot_power(self, power_shot_power: int):
        """Sets the power_shot_power of this Player.


        :param power_shot_power: The power_shot_power of this Player.
        :type power_shot_power: int
        """

        self._power_shot_power = power_shot_power

    @property
    def power_jumping(self) -> int:
        """Gets the power_jumping of this Player.


        :return: The power_jumping of this Player.
        :rtype: int
        """
        return self._power_jumping

    @power_jumping.setter
    def power_jumping(self, power_jumping: int):
        """Sets the power_jumping of this Player.


        :param power_jumping: The power_jumping of this Player.
        :type power_jumping: int
        """

        self._power_jumping = power_jumping

    @property
    def power_stamina(self) -> int:
        """Gets the power_stamina of this Player.


        :return: The power_stamina of this Player.
        :rtype: int
        """
        return self._power_stamina

    @power_stamina.setter
    def power_stamina(self, power_stamina: int):
        """Sets the power_stamina of this Player.


        :param power_stamina: The power_stamina of this Player.
        :type power_stamina: int
        """

        self._power_stamina = power_stamina

    @property
    def power_strength(self) -> int:
        """Gets the power_strength of this Player.


        :return: The power_strength of this Player.
        :rtype: int
        """
        return self._power_strength

    @power_strength.setter
    def power_strength(self, power_strength: int):
        """Sets the power_strength of this Player.


        :param power_strength: The power_strength of this Player.
        :type power_strength: int
        """

        self._power_strength = power_strength

    @property
    def power_long_shots(self) -> int:
        """Gets the power_long_shots of this Player.


        :return: The power_long_shots of this Player.
        :rtype: int
        """
        return self._power_long_shots

    @power_long_shots.setter
    def power_long_shots(self, power_long_shots: int):
        """Sets the power_long_shots of this Player.


        :param power_long_shots: The power_long_shots of this Player.
        :type power_long_shots: int
        """

        self._power_long_shots = power_long_shots

    @property
    def mentality_aggression(self) -> int:
        """Gets the mentality_aggression of this Player.


        :return: The mentality_aggression of this Player.
        :rtype: int
        """
        return self._mentality_aggression

    @mentality_aggression.setter
    def mentality_aggression(self, mentality_aggression: int):
        """Sets the mentality_aggression of this Player.


        :param mentality_aggression: The mentality_aggression of this Player.
        :type mentality_aggression: int
        """

        self._mentality_aggression = mentality_aggression

    @property
    def mentality_interceptions(self) -> int:
        """Gets the mentality_interceptions of this Player.


        :return: The mentality_interceptions of this Player.
        :rtype: int
        """
        return self._mentality_interceptions

    @mentality_interceptions.setter
    def mentality_interceptions(self, mentality_interceptions: int):
        """Sets the mentality_interceptions of this Player.


        :param mentality_interceptions: The mentality_interceptions of this Player.
        :type mentality_interceptions: int
        """

        self._mentality_interceptions = mentality_interceptions

    @property
    def mentality_positioning(self) -> int:
        """Gets the mentality_positioning of this Player.


        :return: The mentality_positioning of this Player.
        :rtype: int
        """
        return self._mentality_positioning

    @mentality_positioning.setter
    def mentality_positioning(self, mentality_positioning: int):
        """Sets the mentality_positioning of this Player.


        :param mentality_positioning: The mentality_positioning of this Player.
        :type mentality_positioning: int
        """

        self._mentality_positioning = mentality_positioning

    @property
    def mentality_vision(self) -> int:
        """Gets the mentality_vision of this Player.


        :return: The mentality_vision of this Player.
        :rtype: int
        """
        return self._mentality_vision

    @mentality_vision.setter
    def mentality_vision(self, mentality_vision: int):
        """Sets the mentality_vision of this Player.


        :param mentality_vision: The mentality_vision of this Player.
        :type mentality_vision: int
        """

        self._mentality_vision = mentality_vision

    @property
    def mentality_penalties(self) -> int:
        """Gets the mentality_penalties of this Player.


        :return: The mentality_penalties of this Player.
        :rtype: int
        """
        return self._mentality_penalties

    @mentality_penalties.setter
    def mentality_penalties(self, mentality_penalties: int):
        """Sets the mentality_penalties of this Player.


        :param mentality_penalties: The mentality_penalties of this Player.
        :type mentality_penalties: int
        """

        self._mentality_penalties = mentality_penalties

    @property
    def mentality_composure(self) -> int:
        """Gets the mentality_composure of this Player.


        :return: The mentality_composure of this Player.
        :rtype: int
        """
        return self._mentality_composure

    @mentality_composure.setter
    def mentality_composure(self, mentality_composure: int):
        """Sets the mentality_composure of this Player.


        :param mentality_composure: The mentality_composure of this Player.
        :type mentality_composure: int
        """

        self._mentality_composure = mentality_composure

    @property
    def defending_marking(self) -> int:
        """Gets the defending_marking of this Player.


        :return: The defending_marking of this Player.
        :rtype: int
        """
        return self._defending_marking

    @defending_marking.setter
    def defending_marking(self, defending_marking: int):
        """Sets the defending_marking of this Player.


        :param defending_marking: The defending_marking of this Player.
        :type defending_marking: int
        """

        self._defending_marking = defending_marking

    @property
    def defending_standing_tackle(self) -> int:
        """Gets the defending_standing_tackle of this Player.


        :return: The defending_standing_tackle of this Player.
        :rtype: int
        """
        return self._defending_standing_tackle

    @defending_standing_tackle.setter
    def defending_standing_tackle(self, defending_standing_tackle: int):
        """Sets the defending_standing_tackle of this Player.


        :param defending_standing_tackle: The defending_standing_tackle of this Player.
        :type defending_standing_tackle: int
        """

        self._defending_standing_tackle = defending_standing_tackle

    @property
    def defending_sliding_tackle(self) -> int:
        """Gets the defending_sliding_tackle of this Player.


        :return: The defending_sliding_tackle of this Player.
        :rtype: int
        """
        return self._defending_sliding_tackle

    @defending_sliding_tackle.setter
    def defending_sliding_tackle(self, defending_sliding_tackle: int):
        """Sets the defending_sliding_tackle of this Player.


        :param defending_sliding_tackle: The defending_sliding_tackle of this Player.
        :type defending_sliding_tackle: int
        """

        self._defending_sliding_tackle = defending_sliding_tackle

    @property
    def goalkeeping_diving(self) -> int:
        """Gets the goalkeeping_diving of this Player.


        :return: The goalkeeping_diving of this Player.
        :rtype: int
        """
        return self._goalkeeping_diving

    @goalkeeping_diving.setter
    def goalkeeping_diving(self, goalkeeping_diving: int):
        """Sets the goalkeeping_diving of this Player.


        :param goalkeeping_diving: The goalkeeping_diving of this Player.
        :type goalkeeping_diving: int
        """

        self._goalkeeping_diving = goalkeeping_diving

    @property
    def goalkeeping_handling(self) -> int:
        """Gets the goalkeeping_handling of this Player.


        :return: The goalkeeping_handling of this Player.
        :rtype: int
        """
        return self._goalkeeping_handling

    @goalkeeping_handling.setter
    def goalkeeping_handling(self, goalkeeping_handling: int):
        """Sets the goalkeeping_handling of this Player.


        :param goalkeeping_handling: The goalkeeping_handling of this Player.
        :type goalkeeping_handling: int
        """

        self._goalkeeping_handling = goalkeeping_handling

    @property
    def goalkeeping_kicking(self) -> int:
        """Gets the goalkeeping_kicking of this Player.


        :return: The goalkeeping_kicking of this Player.
        :rtype: int
        """
        return self._goalkeeping_kicking

    @goalkeeping_kicking.setter
    def goalkeeping_kicking(self, goalkeeping_kicking: int):
        """Sets the goalkeeping_kicking of this Player.


        :param goalkeeping_kicking: The goalkeeping_kicking of this Player.
        :type goalkeeping_kicking: int
        """

        self._goalkeeping_kicking = goalkeeping_kicking

    @property
    def goalkeeping_positioning(self) -> int:
        """Gets the goalkeeping_positioning of this Player.


        :return: The goalkeeping_positioning of this Player.
        :rtype: int
        """
        return self._goalkeeping_positioning

    @goalkeeping_positioning.setter
    def goalkeeping_positioning(self, goalkeeping_positioning: int):
        """Sets the goalkeeping_positioning of this Player.


        :param goalkeeping_positioning: The goalkeeping_positioning of this Player.
        :type goalkeeping_positioning: int
        """

        self._goalkeeping_positioning = goalkeeping_positioning

    @property
    def goalkeeping_reflexes(self) -> int:
        """Gets the goalkeeping_reflexes of this Player.


        :return: The goalkeeping_reflexes of this Player.
        :rtype: int
        """
        return self._goalkeeping_reflexes

    @goalkeeping_reflexes.setter
    def goalkeeping_reflexes(self, goalkeeping_reflexes: int):
        """Sets the goalkeeping_reflexes of this Player.


        :param goalkeeping_reflexes: The goalkeeping_reflexes of this Player.
        :type goalkeeping_reflexes: int
        """

        self._goalkeeping_reflexes = goalkeeping_reflexes
